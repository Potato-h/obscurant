use std::rc::Rc;

use obscurant::{
  tokens::Token,
  lexer::LexicalError,
  ast,
};

grammar;

Comma<T>: Vec<T> = { 
    <mut v:(<T> ",")*> <e:T> => {
      v.push(e);
      v
    }
};

Rc<T>: Rc<T> = {
  <v:T> => Rc::new(v),
};

Atom: ast::Expression = {
  <id:"ident"> => ast::Expression::Identifier(ast::Ident(id)),
  <lit:"literal"> => ast::Expression::Literal(lit),
  <n:"num"> => ast::Expression::Constant(ast::Constant::Integer(n)),
  "(" <v:Expr> ")" => v,
}

Postfix: ast::Expression = {
  <atom:Atom> => atom,
  <expr:Rc<Postfix>> "(" <args:Comma<Assigment>> ")" => ast::Expression::Postfix(expr, ast::PostOp::Call(args)),
  <expr:Rc<Postfix>> "[" <idx:Rc<Expr>> "]" => ast::Expression::Postfix(expr, ast::PostOp::Index(idx)),
  <expr:Rc<Postfix>> "." <id:"ident"> => ast::Expression::Postfix(expr, ast::PostOp::Dot(ast::Ident(id))),
  <expr:Rc<Postfix>> "->" <id:"ident"> => ast::Expression::Postfix(expr, ast::PostOp::Arrow(ast::Ident(id))),
  <expr:Rc<Postfix>> "++" => ast::Expression::Postfix(expr, ast::PostOp::Inc),
  <expr:Rc<Postfix>> "--" => ast::Expression::Postfix(expr, ast::PostOp::Dec),
}

UnaryOp: ast::UnOp = {
  "&" => ast::UnOp::Ref,
  "*" => ast::UnOp::Deref,
  "+" => ast::UnOp::Plus,
  "-" => ast::UnOp::Minus,
  "~" => ast::UnOp::Inversion,
  "!" => ast::UnOp::Negation,
}

Unary: ast::Expression = {
  Postfix,
  "++" <expr:Rc<Unary>> => ast::Expression::Unary(ast::UnOp::Inc, expr),
  "--" <expr:Rc<Unary>> => ast::Expression::Unary(ast::UnOp::Dec, expr),
  <unop:UnaryOp> <expr:Rc<Cast>> => ast::Expression::Unary(unop, expr),
}

Cast: ast::Expression = {
  Unary,
  "(" <ty:TypeName> ")" <expr:Rc<Cast>> => ast::Expression::Cast(ty, expr),
}

Mult: ast::Expression = {
  Cast,
  <rest:Rc<Mult>> "*" <expr:Rc<Cast>> => ast::Expression::Binary(rest, ast::BinOp::Mul, expr),
  <rest:Rc<Mult>> "/" <expr:Rc<Cast>> => ast::Expression::Binary(rest, ast::BinOp::Div, expr),
  <rest:Rc<Mult>> "%" <expr:Rc<Cast>> => ast::Expression::Binary(rest, ast::BinOp::Mod, expr),
}

Add: ast::Expression = {
  Mult,
  <rest:Rc<Add>> "+" <expr:Rc<Mult>> => ast::Expression::Binary(rest, ast::BinOp::Add, expr),
  <rest:Rc<Add>> "-" <expr:Rc<Mult>> => ast::Expression::Binary(rest, ast::BinOp::Sub, expr),
}

Relation: ast::Expression = {
  Add,
  <lhs:Rc<Relation>> "<" <rhs:Rc<Add>> => ast::Expression::Binary(lhs, ast::BinOp::LT, rhs),
  <lhs:Rc<Relation>> ">" <rhs:Rc<Add>> => ast::Expression::Binary(lhs, ast::BinOp::GT, rhs),
  <lhs:Rc<Relation>> "<=" <rhs:Rc<Add>> => ast::Expression::Binary(lhs, ast::BinOp::LE, rhs),
  <lhs:Rc<Relation>> ">=" <rhs:Rc<Add>> => ast::Expression::Binary(lhs, ast::BinOp::GE, rhs),
}

Equality: ast::Expression = {
  Relation,
  <lhs:Rc<Equality>> "==" <rhs:Rc<Relation>> => ast::Expression::Binary(lhs, ast::BinOp::EQ, rhs),
  <lhs:Rc<Equality>> "!=" <rhs:Rc<Relation>> => ast::Expression::Binary(lhs, ast::BinOp::NE, rhs),
}

LogicalAnd: ast::Expression = {
  Equality,
  <lhs:Rc<LogicalAnd>> "&&" <rhs:Rc<Equality>> => ast::Expression::Binary(lhs, ast::BinOp::LAND, rhs),
}

LogicalOr: ast::Expression = {
  LogicalAnd,
  <lhs:Rc<LogicalOr>> "||" <rhs:Rc<LogicalAnd>> => ast::Expression::Binary(lhs, ast::BinOp::LOR, rhs),
}

Cond: ast::Expression = {
  LogicalOr,
  <cond:Rc<LogicalOr>> "?" <expr:Rc<Expr>> ":" <other:Rc<Cond>> => ast::Expression::Conditional(cond, expr, other),
}

AssignOp: ast::AssignOp = {
  "=" => ast::AssignOp::Mov,
  "*=" => ast::AssignOp::Mul,
  "/=" => ast::AssignOp::Div,
  "%=" => ast::AssignOp::Mod,
  "+=" => ast::AssignOp::Add,
  "-=" => ast::AssignOp::Sub,
}

Assigment: ast::Expression = {
  Cond,
  <lhs:Rc<Unary>> <op:AssignOp> <rhs:Rc<Assigment>> => ast::Expression::Assignment(lhs, op, rhs),
}

pub Expr: ast::Expression = {
  Assigment,
}

TypeName: ast::Ty = {
  "void" => ast::Ty::Void,
  "char" => ast::Ty::Char,
  "short" => ast::Ty::Short,
  "int" => ast::Ty::Int,
  "long" => ast::Ty::Long,
  "float" => ast::Ty::Float,
  "double" => ast::Ty::Double,
}

TypeSpecifiers: ast::Ty = {
  TypeName,
}

DeclarationSpecifiers: ast::Ty = {
  TypeSpecifiers,
}

Pointer: Box<dyn FnOnce(ast::Ty) -> ast::Ty> = {
  "*" => Box::new(|ty| ast::Ty::Pointer(Rc::new(ty))),
  "*" <p:Pointer> => Box::new(|ty| ast::Ty::Pointer(Rc::new(p(ty)))),
}

DirectDeclarator: Box<dyn FnOnce(ast::Ty) -> ast::Variable> = {
  <id:"ident"> => { 
    Box::new(|ty| ast::Variable {
      id: ast::Ident(id),
      ty,
    }) 
  },
  <decl:DirectDeclarator> "[" <sz:Rc<Expr>?> "]" => {
    Box::new(|ty| {
      let var = decl(ty);
      ast::Variable {
        id: var.id,
        ty: ast::Ty::Array(Rc::new(var.ty), sz),
      }
    })
  },
}

Declarator: Box<dyn FnOnce(ast::Ty) -> ast::Variable> = {
  DirectDeclarator,
  <p:Pointer> <decl:DirectDeclarator> => {
    Box::new(|ty| decl(p(ty)))
  },
}

InitDeclarator: Box<dyn FnOnce(ast::Ty) -> ast::Declaration> = {
  <decl:Declarator> => { 
    Box::new(|ty| 
      ast::Declaration {
        var: decl(ty),
        init: None,
      })
    },
  <decl:Declarator> "=" <init:Expr> => {
    Box::new(|ty|
      ast::Declaration {
        var: decl(ty),
        init: Some(init),
      }
    )
  },
}

Variable: ast::Variable = {
  <ty:DeclarationSpecifiers> <decl:Declarator> => {
    decl(ty)
  },
}

Declaration: ast::Declaration = {
  <ty:DeclarationSpecifiers> <decl:InitDeclarator> ";" => {
    decl(ty)
  },
}

CompoundStatement: ast::Statement = {
  "{" <stats:Statement*> "}" => ast::Statement::Compound(stats),
}

ExprStat: ast::Statement = {
  <expr:Expr?> ";" => ast::Statement::Expr(expr),
}

OpenIf: ast::Selection = {
  "if" "(" <expr:Expr> ")" <stat:Statement> => ast::Selection::If(expr, stat),
  "if" "(" <expr:Expr> ")" <stat1:ClosedStatement> "else" <stat2:OpenStatement> => {
    ast::Selection::IfElse(expr, stat1, stat2)
  },
}

ClosedSelection: ast::Selection = {
  "if" "(" <expr:Expr> ")" <stat1:ClosedStatement> "else" <stat2:ClosedStatement> => {
    ast::Selection::IfElse(expr, stat1, stat2)
  },

  // NOTE: it's not clear what type of stat should have
  "switch" "(" <expr:Expr> ")" <stat:ClosedStatement> => {
    ast::Selection::Switch(expr, stat)
  },
}

OpenIteration: ast::Iteration = {
  "while" "(" <expr:Expr> ")" <stat:OpenStatement> => {
    ast::Iteration::While(expr, stat)
  },

  "for" "(" <init:ExprStat> <cond:ExprStat> <step:Expr> ")" <stat:OpenStatement> => {
    ast::Iteration::For(init, cond, step, stat)
  },
}

ClosedIteration: ast::Iteration = {
  "while" "(" <expr:Expr> ")" <stat:ClosedStatement> => {
    ast::Iteration::While(expr, stat)
  },

  "for" "(" <init:ExprStat> <cond:ExprStat> <step:Expr> ")" <stat:ClosedStatement> => {
    ast::Iteration::For(init, cond, step, stat)
  },
}

JumpStatement: ast::Jump = {
  "continue" ";" => ast::Jump::Continue,
  "break" ";" => ast::Jump::Break,
  "return" <expr:Expr?> ";" => ast::Jump::Return(expr),
}

OpenStatement: ast::Statement = {
  <stat:Rc<OpenIf>> => ast::Statement::Selection(stat),
  <stat:Rc<OpenIteration>> => ast::Statement::Iteration(stat),
}

ClosedStatement: ast::Statement = {
  ExprStat,
  CompoundStatement,
  <stat:Rc<JumpStatement>> => ast::Statement::Jump(stat),
  <decl:Rc<Declaration>> => ast::Statement::Declaration(decl),
  <stat:Rc<ClosedSelection>> => ast::Statement::Selection(stat),
  <stat:Rc<ClosedIteration>> => ast::Statement::Iteration(stat),
}

pub Statement: ast::Statement = {
  OpenStatement,
  ClosedStatement,
}

Function: ast::Function = {
  <var:Variable> "(" <args:Comma<Variable>> ")" <body:CompoundStatement> => {
    ast::Function {
      id: var.id,
      args,
      ret_ty: var.ty,
      body,
    }
  },
}

Item: ast::Item = {
  <item:Function> => ast::Item::Function(item),
}

pub Unit: ast::Unit = {
  <items:Item*> => {
    ast::Unit {
      items,
    }
  }
}

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "ident" => Token::Identifier(<String>),
    "literal" => Token::Literal(<String>),
    "num" => Token::Integer(<i128>),
    "." => Token::Dot,
    "," => Token::Comma,
    "++" => Token::Inc,
    "--" => Token::Dec,
    "->" => Token::Arrow,
    
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,

    "=" => Token::Assign,
    ";" => Token::Semicolon,
 
    "&" => Token::Ref,
    "~" => Token::Inversion,
    "!" => Token::Negation,
 
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,
    "%" => Token::OperatorMod,
 
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
 
    "<" => Token::LT,
    ">" => Token::GT,
    "<=" => Token::LE,
    ">=" => Token::GE,
    
    "==" => Token::EQ,
    "!=" => Token::NE,

    "&&" => Token::LAND,
    "||" => Token::LOR,

    "?" => Token::Question,
    ":" => Token::Colon,

    "*=" => Token::MulAssign,
    "/=" => Token::DivAssign,
    "%=" => Token::ModAssign,
    "+=" => Token::AddAssign,
    "-=" => Token::SubAssign,

    "void" => Token::Void,
    "char" => Token::Char,
    "short" => Token::Short,
    "int" => Token::Int,
    "long" => Token::Long,
    "float" => Token::Float,
    "double" => Token::Double,
 
    "if" => Token::If,
    "else" => Token::Else,
    "switch" => Token::Switch,
    "for" => Token::For,
    "while" => Token::While,
    "do" => Token::Do,
  
    "continue" => Token::Continue,
    "break" => Token::Break,
    "return" => Token::Return,
  }
}